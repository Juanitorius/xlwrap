/* Generated By:JavaCC: Do not edit this line. XLExpressionTokenManager.java */
package at.jku.xlwrap.map.expr.parser;
import at.jku.xlwrap.common.XLWrapException;
import at.jku.xlwrap.map.expr.*;
import at.jku.xlwrap.map.expr.val.*;
import at.jku.xlwrap.map.expr.func.*;
import java.io.Reader;
import java.io.StringReader;

/** Token Manager. */
public class XLExpressionTokenManager implements XLExpressionConstants
{

  /** Debug output. */
  public static  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public static  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private static final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0x100L) != 0L)
            return 145;
         if ((active0 & 0x3000L) != 0L)
            return 2;
         if ((active0 & 0x8000000000L) != 0L)
            return 146;
         if ((active0 & 0x1000000L) != 0L)
            return 147;
         if ((active0 & 0x110001ecefcL) != 0L)
            return 148;
         if ((active0 & 0x200000L) != 0L)
            return 0;
         return -1;
      case 1:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 1;
            return 149;
         }
         if ((active0 & 0x1c6000L) != 0L)
            return 148;
         return -1;
      case 2:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
            return 149;
         }
         return -1;
      default :
         return -1;
   }
}
private static final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
static private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
static private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 9:
         return jjStartNfaWithStates_0(0, 2, 148);
      case 10:
         return jjStartNfaWithStates_0(0, 3, 148);
      case 12:
         return jjStartNfaWithStates_0(0, 5, 148);
      case 13:
         return jjStartNfaWithStates_0(0, 4, 148);
      case 33:
         return jjStartNfaWithStates_0(0, 21, 0);
      case 37:
         return jjStartNfaWithStates_0(0, 10, 148);
      case 38:
         jjmatchedKind = 36;
         return jjMoveStringLiteralDfa1_0(0x100000L);
      case 40:
         return jjStopAtPos(0, 37);
      case 41:
         return jjStopAtPos(0, 38);
      case 42:
         return jjStartNfaWithStates_0(0, 8, 145);
      case 43:
         return jjStartNfaWithStates_0(0, 6, 148);
      case 44:
         return jjStartNfaWithStates_0(0, 39, 146);
      case 45:
         return jjStartNfaWithStates_0(0, 7, 148);
      case 47:
         return jjStartNfaWithStates_0(0, 9, 148);
      case 59:
         return jjStartNfaWithStates_0(0, 40, 148);
      case 60:
         jjmatchedKind = 12;
         return jjMoveStringLiteralDfa1_0(0x2000L);
      case 61:
         jjmatchedKind = 17;
         return jjMoveStringLiteralDfa1_0(0x40000L);
      case 62:
         jjmatchedKind = 15;
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 94:
         return jjStartNfaWithStates_0(0, 11, 148);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1000000L);
      case 124:
         return jjMoveStringLiteralDfa1_0(0x80000L);
      default :
         return jjMoveNfa_0(1, 0);
   }
}
static private int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(1, 20, 148);
         break;
      case 61:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(1, 13, 148);
         else if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(1, 14, 148);
         else if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(1, 18, 148);
         break;
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L);
      case 124:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(1, 19, 148);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
static private int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
static private int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 108:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(3, 24, 149);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
static private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 145;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 59);
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 6);
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if (curChar == 62)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 149:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 59);
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 6);
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddStates(7, 9);
                  }
                  break;
               case 147:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 59);
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 6);
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddStates(7, 9);
                  }
                  break;
               case 146:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 59);
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 6);
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 26)
                        kind = 26;
                     jjCheckNAddTwoStates(23, 24);
                  }
                  break;
               case 148:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 59);
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 6);
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 145:
                  if (curChar == 59)
                     jjCheckNAddStates(10, 16);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 59);
                  break;
               case 0:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(30, 59);
                  else if (curChar == 35)
                     jjCheckNAddStates(0, 6);
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if (curChar == 61)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 1:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  else if (curChar == 34)
                     jjCheckNAddStates(21, 27);
                  else if (curChar == 39)
                     jjCheckNAddStates(28, 34);
                  else if (curChar == 42)
                  {
                     if (kind > 28)
                        kind = 28;
                     jjCheckNAddTwoStates(29, 39);
                  }
                  else if (curChar == 35)
                     jjCheckNAdd(28);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 25)
                        kind = 25;
                     jjCheckNAddStates(35, 41);
                  }
                  else if ((0x500000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  else if (curChar == 36)
                     jjCheckNAddStates(42, 47);
                  else if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  else if (curChar == 33)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 3:
                  if (curChar == 60)
                     jjstateSet[jjnewStateCnt++] = 2;
                  break;
               case 22:
                  if ((0x500000000000L & l) != 0L)
                     jjCheckNAdd(23);
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(23, 24);
                  break;
               case 25:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(26);
                  break;
               case 27:
                  if (curChar == 35)
                     jjCheckNAdd(28);
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(28, 29);
                  break;
               case 29:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(30, 59);
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(7, 9);
                  break;
               case 32:
                  if (curChar == 58)
                     jjCheckNAddStates(48, 53);
                  break;
               case 33:
                  if (curChar == 36)
                     jjCheckNAddStates(54, 57);
                  break;
               case 34:
                  if (curChar == 35)
                     jjCheckNAdd(35);
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(35, 36);
                  break;
               case 36:
                  if (curChar == 46)
                     jjCheckNAdd(37);
                  break;
               case 38:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(38, 39);
                  break;
               case 39:
                  if (curChar == 59)
                     jjCheckNAddStates(10, 16);
                  break;
               case 40:
                  if (curChar == 36)
                     jjCheckNAddStates(58, 62);
                  break;
               case 41:
                  if (curChar == 42)
                     jjCheckNAdd(42);
                  break;
               case 42:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(43, 59);
                  break;
               case 44:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddStates(63, 65);
                  break;
               case 45:
                  if (curChar == 58)
                     jjCheckNAddStates(66, 71);
                  break;
               case 46:
                  if (curChar == 36)
                     jjCheckNAddStates(72, 75);
                  break;
               case 47:
                  if (curChar == 35)
                     jjCheckNAdd(48);
                  break;
               case 48:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(48, 49);
                  break;
               case 49:
                  if (curChar == 46)
                     jjCheckNAdd(50);
                  break;
               case 51:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(39, 51);
                  break;
               case 52:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(52, 49);
                  break;
               case 53:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 54:
                  if ((0xffffbffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(54, 55);
                  break;
               case 55:
                  if (curChar == 34)
                     jjCheckNAdd(49);
                  break;
               case 56:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 57:
                  if ((0xffffbf7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(57, 58);
                  break;
               case 58:
                  if (curChar == 39)
                     jjCheckNAdd(49);
                  break;
               case 59:
                  if (curChar != 42)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAdd(39);
                  break;
               case 60:
                  if (curChar == 35)
                     jjCheckNAdd(61);
                  break;
               case 61:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(61, 42);
                  break;
               case 62:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(62, 42);
                  break;
               case 63:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 64:
                  if ((0xffffbffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(64, 65);
                  break;
               case 65:
                  if (curChar == 34)
                     jjCheckNAdd(42);
                  break;
               case 66:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 67:
                  if ((0xffffbf7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(67, 68);
                  break;
               case 68:
                  if (curChar == 39)
                     jjCheckNAdd(42);
                  break;
               case 69:
                  if (curChar != 42)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(39, 42);
                  break;
               case 70:
                  if (curChar == 39)
                     jjCheckNAddStates(76, 79);
                  break;
               case 71:
                  if ((0xffffff77ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(71, 72);
                  break;
               case 72:
                  if (curChar == 39)
                     jjCheckNAdd(73);
                  break;
               case 73:
                  if (curChar == 35)
                     jjCheckNAddStates(80, 86);
                  break;
               case 74:
                  if (curChar == 34)
                     jjCheckNAddStates(87, 90);
                  break;
               case 75:
                  if ((0xfffffff3ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(75, 76);
                  break;
               case 76:
                  if (curChar == 34)
                     jjCheckNAdd(73);
                  break;
               case 77:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddStates(91, 94);
                  break;
               case 78:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(78, 73);
                  break;
               case 79:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(79, 36);
                  break;
               case 80:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 81:
                  if ((0xffffbffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(81, 82);
                  break;
               case 82:
                  if (curChar == 34)
                     jjCheckNAdd(36);
                  break;
               case 83:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 84:
                  if ((0xffffbf7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(84, 85);
                  break;
               case 85:
                  if (curChar == 39)
                     jjCheckNAdd(36);
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 90:
                  if (curChar != 42)
                     break;
                  if (kind > 28)
                     kind = 28;
                  jjCheckNAddTwoStates(29, 39);
                  break;
               case 91:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 92:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 93:
                  if (curChar == 35)
                     jjCheckNAddStates(0, 6);
                  break;
               case 94:
                  if (curChar == 36)
                     jjCheckNAddStates(95, 99);
                  break;
               case 95:
                  if (curChar == 42)
                     jjCheckNAdd(29);
                  break;
               case 96:
                  if ((0xfbffb872ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  break;
               case 97:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(98, 99);
                  break;
               case 98:
                  if ((0xffffbffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(98, 99);
                  break;
               case 99:
                  if (curChar == 34)
                     jjCheckNAdd(29);
                  break;
               case 100:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 101:
                  if ((0xffffbf7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(101, 102);
                  break;
               case 102:
                  if (curChar == 39)
                     jjCheckNAdd(29);
                  break;
               case 103:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAddStates(35, 41);
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 25)
                     kind = 25;
                  jjCheckNAdd(104);
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(105, 106);
                  break;
               case 106:
                  if (curChar != 46)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(107, 108);
                  break;
               case 107:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(107, 108);
                  break;
               case 109:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(110);
                  break;
               case 110:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(110);
                  break;
               case 111:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(111, 112);
                  break;
               case 112:
                  if (curChar == 44)
                     jjCheckNAddTwoStates(113, 116);
                  break;
               case 114:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(115);
                  break;
               case 115:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(115);
                  break;
               case 116:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAddTwoStates(113, 116);
                  break;
               case 117:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(117, 118);
                  break;
               case 119:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(120);
                  break;
               case 120:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 26)
                     kind = 26;
                  jjCheckNAdd(120);
                  break;
               case 121:
                  if (curChar == 36)
                     jjCheckNAddStates(42, 47);
                  break;
               case 122:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjCheckNAdd(122);
                  break;
               case 123:
                  if (curChar == 39)
                     jjCheckNAddStates(28, 34);
                  break;
               case 124:
                  if ((0xffffff77ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(124, 125);
                  break;
               case 125:
                  if (curChar == 39)
                     jjCheckNAdd(93);
                  break;
               case 126:
                  if ((0xffffff7fffffdbffL & l) != 0L)
                     jjCheckNAddStates(100, 102);
                  break;
               case 128:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(100, 102);
                  break;
               case 129:
                  if (curChar == 39 && kind > 34)
                     kind = 34;
                  break;
               case 130:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(103, 106);
                  break;
               case 131:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(100, 102);
                  break;
               case 132:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 133;
                  break;
               case 133:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(131);
                  break;
               case 134:
                  if (curChar == 34)
                     jjCheckNAddStates(21, 27);
                  break;
               case 135:
                  if ((0xfffffff3ffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(135, 136);
                  break;
               case 136:
                  if (curChar == 34)
                     jjCheckNAdd(93);
                  break;
               case 137:
                  if ((0xfffffffbffffdbffL & l) != 0L)
                     jjCheckNAddStates(107, 109);
                  break;
               case 139:
                  if ((0x8400000000L & l) != 0L)
                     jjCheckNAddStates(107, 109);
                  break;
               case 140:
                  if (curChar == 34 && kind > 35)
                     kind = 35;
                  break;
               case 141:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(110, 113);
                  break;
               case 142:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAddStates(107, 109);
                  break;
               case 143:
                  if ((0xf000000000000L & l) != 0L)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 144:
                  if ((0xff000000000000L & l) != 0L)
                     jjCheckNAdd(142);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  jjCheckNAddTwoStates(96, 29);
                  jjCheckNAddTwoStates(92, 93);
                  break;
               case 149:
                  jjCheckNAddTwoStates(96, 29);
                  jjCheckNAddTwoStates(92, 93);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(114, 116);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAdd(88);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 147:
                  jjCheckNAddTwoStates(96, 29);
                  jjCheckNAddTwoStates(92, 93);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 32)
                        kind = 32;
                     jjCheckNAddStates(114, 116);
                  }
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 146:
                  jjCheckNAddTwoStates(96, 29);
                  jjCheckNAddTwoStates(92, 93);
                  break;
               case 148:
                  jjCheckNAddTwoStates(96, 29);
                  jjCheckNAddTwoStates(92, 93);
                  break;
               case 0:
                  jjCheckNAddTwoStates(96, 29);
                  jjCheckNAddTwoStates(92, 93);
                  break;
               case 1:
                  jjCheckNAddStates(17, 20);
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(87, 89);
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 15;
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 4:
                  if (curChar == 101 && kind > 22)
                     kind = 22;
                  break;
               case 5:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 4;
                  break;
               case 6:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 69 && kind > 22)
                     kind = 22;
                  break;
               case 9:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 10:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 11:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 101 && kind > 23)
                     kind = 23;
                  break;
               case 13:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 12;
                  break;
               case 14:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 16:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 17:
                  if (curChar == 69 && kind > 23)
                     kind = 23;
                  break;
               case 18:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 18;
                  break;
               case 20:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 21:
                  if (curChar == 70)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 24:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(117, 118);
                  break;
               case 30:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(30, 31);
                  break;
               case 37:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(119, 120);
                  break;
               case 43:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(121, 122);
                  break;
               case 50:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     jjAddStates(123, 124);
                  break;
               case 52:
                  jjAddStates(125, 126);
                  break;
               case 54:
                  jjAddStates(127, 128);
                  break;
               case 57:
                  jjAddStates(129, 130);
                  break;
               case 62:
                  jjCheckNAddTwoStates(62, 42);
                  break;
               case 64:
                  jjAddStates(131, 132);
                  break;
               case 67:
                  jjAddStates(133, 134);
                  break;
               case 71:
                  jjAddStates(135, 136);
                  break;
               case 75:
                  jjAddStates(137, 138);
                  break;
               case 77:
                  jjCheckNAddStates(91, 94);
                  break;
               case 78:
                  jjCheckNAddTwoStates(78, 73);
                  break;
               case 79:
                  jjAddStates(139, 140);
                  break;
               case 81:
                  jjAddStates(141, 142);
                  break;
               case 84:
                  jjAddStates(143, 144);
                  break;
               case 86:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(87, 89);
                  break;
               case 87:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                     jjCheckNAddTwoStates(87, 88);
                  break;
               case 88:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAdd(88);
                  break;
               case 89:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 32)
                     kind = 32;
                  jjCheckNAddStates(114, 116);
                  break;
               case 91:
                  jjCheckNAddStates(17, 20);
                  break;
               case 92:
                  jjCheckNAddTwoStates(92, 93);
                  break;
               case 96:
                  jjCheckNAddTwoStates(96, 29);
                  break;
               case 98:
                  jjAddStates(145, 146);
                  break;
               case 101:
                  jjAddStates(147, 148);
                  break;
               case 108:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(149, 150);
                  break;
               case 113:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(151, 152);
                  break;
               case 118:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(153, 154);
                  break;
               case 122:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 33)
                     kind = 33;
                  jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  jjAddStates(155, 156);
                  break;
               case 126:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(100, 102);
                  break;
               case 127:
                  if (curChar == 92)
                     jjAddStates(157, 159);
                  break;
               case 128:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(100, 102);
                  break;
               case 135:
                  jjAddStates(160, 161);
                  break;
               case 137:
                  if ((0xffffffffefffffffL & l) != 0L)
                     jjCheckNAddStates(107, 109);
                  break;
               case 138:
                  if (curChar == 92)
                     jjAddStates(162, 164);
                  break;
               case 139:
                  if ((0x14404410000000L & l) != 0L)
                     jjCheckNAddStates(107, 109);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  break;
               case 149:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  break;
               case 147:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  break;
               case 146:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  break;
               case 148:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  break;
               case 0:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  break;
               case 1:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(17, 20);
                  break;
               case 52:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(125, 126);
                  break;
               case 54:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(127, 128);
                  break;
               case 57:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(129, 130);
                  break;
               case 62:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(62, 42);
                  break;
               case 64:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(131, 132);
                  break;
               case 67:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(133, 134);
                  break;
               case 71:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(135, 136);
                  break;
               case 75:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(137, 138);
                  break;
               case 77:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddStates(91, 94);
                  break;
               case 78:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(78, 73);
                  break;
               case 79:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(139, 140);
                  break;
               case 81:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(141, 142);
                  break;
               case 84:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(143, 144);
                  break;
               case 92:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(92, 93);
                  break;
               case 96:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(96, 29);
                  break;
               case 98:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(145, 146);
                  break;
               case 101:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(147, 148);
                  break;
               case 124:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(155, 156);
                  break;
               case 126:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(100, 102);
                  break;
               case 135:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(160, 161);
                  break;
               case 137:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(107, 109);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 145 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   94, 27, 96, 97, 100, 30, 90, 31, 32, 39, 40, 60, 43, 69, 70, 74, 
   77, 92, 93, 96, 29, 135, 136, 98, 99, 137, 138, 140, 124, 125, 101, 102, 
   126, 127, 129, 104, 105, 106, 111, 112, 117, 118, 95, 27, 96, 97, 100, 122, 
   33, 34, 79, 80, 83, 37, 34, 79, 80, 83, 41, 60, 62, 63, 66, 39, 
   44, 45, 46, 47, 52, 53, 56, 50, 47, 52, 53, 56, 71, 72, 67, 68, 
   40, 60, 62, 63, 66, 43, 69, 75, 76, 64, 65, 78, 73, 62, 42, 95, 
   27, 96, 97, 100, 126, 127, 129, 126, 127, 131, 129, 137, 138, 140, 137, 138, 
   142, 140, 87, 88, 89, 25, 26, 37, 38, 43, 44, 50, 51, 52, 49, 54, 
   55, 57, 58, 64, 65, 67, 68, 71, 72, 75, 76, 79, 36, 81, 82, 84, 
   85, 98, 99, 101, 102, 109, 110, 114, 115, 119, 120, 124, 125, 128, 130, 132, 
   135, 136, 139, 141, 143, 
};

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\53", "\55", "\52", "\57", "\45", "\136", 
"\74", "\74\75", "\76\75", "\76", null, "\75", "\75\75", "\174\174", "\46\46", "\41", 
null, null, "\156\165\154\154", null, null, null, null, null, null, null, null, null, 
null, null, "\46", "\50", "\51", "\54", "\73", };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0x1ff17ffffc1L, 
};
static final long[] jjtoSkip = {
   0x3eL, 
};
static protected SimpleCharStream input_stream;
static private final int[] jjrounds = new int[145];
static private final int[] jjstateSet = new int[290];
static protected char curChar;
/** Constructor. */
public XLExpressionTokenManager(SimpleCharStream stream){
   if (input_stream != null)
      throw new TokenMgrError("ERROR: Second call to constructor of static lexer. You must use ReInit() to initialize the static variables.", TokenMgrError.STATIC_LEXER_ERROR);
   input_stream = stream;
}

/** Constructor. */
public XLExpressionTokenManager(SimpleCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
static private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 145; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
static public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
static public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

static protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

static int curLexState = 0;
static int defaultLexState = 0;
static int jjnewStateCnt;
static int jjround;
static int jjmatchedPos;
static int jjmatchedKind;

/** Get the next Token. */
public static Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100000000L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

static private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
static private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
static private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

static private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}
